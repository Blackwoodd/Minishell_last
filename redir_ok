#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <readline/readline.h>
#include <readline/history.h>

char *my_strtok(char *str, const char *delim)
{
        char        *token_start;
        static char *last_token = NULL;

        if (str != NULL)
        last_token = str;
        if (last_token == NULL)
        return NULL;
        token_start = last_token;
        while (*last_token != '\0' && strchr(delim, *last_token) == NULL)
        last_token++;
        if (*last_token != '\0')
        {
        *last_token = '\0';
        last_token++;
        }
        else
        last_token = NULL;
        return token_start;
}

int     get_path(char *arg[])
{
        char    command_path[1024];
        char    *path_copy;
        char    *path_token;
        char    *path;

        path = getenv("PATH");
        if (path == NULL)
                return ((write(2, "Impossible de récupérer le chemin PATH.\n", 41)) ,-1);
        path_copy = strdup(path);
        if (path_copy == NULL)
                return ((write(2, "Erreur de copie du chemin PATH.\n", 33)), -1);
        path_token = my_strtok(path_copy, ":");
        while (path_token != NULL)
        {
                strcpy(command_path, path_token);
                strcat(command_path, "/");
                strcat(command_path, arg[0]);
                if (access(command_path, X_OK) == 0)
                {
                        int     pid = fork();
                        if (pid == 0)
                        {
                                execve(command_path, arg, NULL);
                                perror ("execve");
                                exit (EXIT_FAILURE);
                        }
                        else
                        {
                                int status;
                                waitpid(pid, &status, 0);
                                return (EXIT_SUCCESS);
                        }
                }
                path_token = my_strtok(NULL, ":");
        }
        write(2, arg[0], strlen(arg[0]));
        write(2, ": command not found\n", 21);
        return (EXIT_FAILURE);
}

int     echo_help(char *word)
{
        int     i;

        i = 2;
        while (word[i])
        {
                if (word[i] != 'n')
                        return (1);
                i++;
        }
        return (0);
}

int     commande_echo(char *arg[])
{
        int     i;
        int    new_line;

        i = 1;
        new_line = 0;
        if (strncmp(arg[0], "echo", strlen(arg[0])) != 0)
                return (EXIT_FAILURE);
        while (arg[i] && strncmp(arg[i], "-n", 2) == 0)
        {
                if (echo_help(arg[i]) == 0)
                {
                        new_line = 1;
                        i++;
                }
                else
                        break ;
        }
        while (arg[i])
        {
                write(1, arg[i], strlen(arg[i]));
                if (arg[++i] != NULL)
                        write (1, " ", 1);
        }
        if (new_line == 0)
                write(1, "\n", 1);
        return (EXIT_SUCCESS);
}

int     cd_norme(void)
{
        const char      *home;

        home = getenv("HOME");
        if (home == NULL)
                return (1);
        if (chdir(home) != 0)
                return (1);
        return (0);
}

int     commande_cd(char *arg[])
{
        char    cwd[1000];

        if (arg[1] != NULL && arg[2] != NULL)
                return (printf ("cd: too many arguments\n"), EXIT_FAILURE);
        if (chdir(arg[1]) != 0)
        {
                if (arg[1] == NULL)
                {
                        if (cd_norme() == 1)
                                return (EXIT_FAILURE);
                        else
                                return (EXIT_SUCCESS);
                }
                if (arg[1][0] == '-' && !arg[1][1])
                        if (getcwd(cwd, sizeof(cwd)) != NULL)
                                return (printf("%s\n", cwd), EXIT_SUCCESS);
                if (arg[1][0] == '-' && arg[1][1] == '-' && arg[1][2] == '-')
                        return (printf ("cd: --: invalid option\n"), EXIT_FAILURE);
                if (strncmp(arg[1], "Makefile", 8) == 0)
                        printf("cd: Makefile: Not a directory\n");
                else
                        printf("cd: %s: No such file or directory\n", arg[1]);
                return (EXIT_FAILURE);
        }
        return (EXIT_SUCCESS);
}

int     commande_pwd(char *arg[])
{
        char    cwd[1000];
        int     i;

        i = 0;
        if (arg[0] != NULL && arg[1] != NULL && arg[1][0] == '-')
        {
                printf ("pwd: ");
                while ((arg[1][i] == '-' && i < 2) || i != 2)
                {
                        printf ("%c", arg[1][i]);
                        i++;
                }
                printf (": invalid option\n");
                return (EXIT_FAILURE);
        }
        if (getcwd(cwd, sizeof(cwd)) != NULL)
        {
                printf("%s\n", cwd);
                return (EXIT_SUCCESS);
        }
        else
                return (perror("PWD"), EXIT_FAILURE);
}

int     check_no_number(char *tab)
{
        int     i;

        i = 0;
        if (tab[0] == '-' && (tab[1] >= 0 && tab[1] <= 9))
                i++;
        if (tab[0] == '+' && (tab[1] >= 0 && tab[1] <= 9))
                i++;
        while (tab[i])
        {
                if (tab[i] < '0' || tab[i] > '9')
                        return (1);
                i++;
        }
        return (0);
}

void    print_error_arg(void)
{
        printf("exit\n");
        printf("exit: too many arguments\n");
}

int     commande_exit(char *arg[])
{
        if (arg[1] != NULL)
        {
                if (check_no_number(arg[1]) == 1 || strlen(arg[1]) > 19)
                        printf("exit\nexit: %s: numeric argument required\n", arg[1]);
                else
                {
                        if (arg[2] != NULL)
                                return (print_error_arg(), 0);
                        printf("exit\n");
                }
        }
        else
                printf("exit\n");
        return (0);
}

int is_builtin(char *arg[])
{
        if (strcmp(arg[0], "pwd") == 0)
                return (commande_pwd(arg), EXIT_SUCCESS);
        else if (strcmp(arg[0], "cd") == 0)
                return (commande_cd(arg), EXIT_SUCCESS);
        else if (strcmp(arg[0], "echo") == 0)
                return (commande_echo(arg), EXIT_SUCCESS);
        else if (strcmp(arg[0], "exit") == 0)
                return (commande_exit(arg));
        return (EXIT_FAILURE);
}

char    **init_tab_dblin(char *arg[])
{
        char    **tab;
        int     i;
        int     e;

        i = 0;
        while (arg[i] && strcmp(arg[i], ">>") != 0)
                i++;
        tab = malloc(sizeof(char *) * i + 1);
        i = 0;
        e = 0;
        while (arg[i] && strcmp(arg[i], ">>") != 0)
        {
                tab[e] = malloc(sizeof(char) * strlen(arg[i] + 1));
                strcpy(tab[e], arg[i]);
                e++;
                i++;
        }
        tab[e] = NULL;
        return (tab);
}

char    **init_tab_sglin(char *arg[])
{
        char    **tab;
        int     i;
        int     e;

        i = 0;
        while (arg[i] && strcmp(arg[i], ">") != 0)
                i++;
        tab = malloc(sizeof(char *) * i + 1);
        i = 0;
        e = 0;
        while (arg[i] && strcmp(arg[i], ">") != 0)
        {
                tab[e] = malloc(sizeof(char) * strlen(arg[i] + 1));
                strcpy(tab[e], arg[i]);
                e++;
                i++;
        }
        tab[e] = NULL;
        return (tab);
}

char    **init_tab_sglout(char *arg[])
{
        char    **tab;
        int     i;
        int     e;

        i = 0;
        while (arg[i] && strcmp(arg[i], "<") != 0)
                i++;
        tab = malloc(sizeof(char *) * i + 1);
        i = 0;
        e = 0;
        while (arg[i] && strcmp(arg[i], "<") != 0)
        {
                tab[e] = malloc(sizeof(char) * (strlen(arg[i]) + 1));
                strcpy(tab[e], arg[i]);
                e++;
                i++;
        }
        tab[e] = NULL;
        return (tab);
}

int here_doc(char *arg[])
{
        int i = 0;
        char *heredoc_delimiter = NULL;
        char *heredoc_content = NULL;
        char *input_line = NULL;

        while (arg[i])
        {
                if (strcmp(arg[i], "<<") == 0 && arg[i + 1])
                {
                        heredoc_delimiter = strdup(arg[i + 1]);
                        break;
                }
                i++;
        }

        if (heredoc_delimiter)
        {
                size_t buffer_size = 1024;
                heredoc_content = (char *)malloc(buffer_size);
                if (heredoc_content == NULL) {
                        perror("Erreur d'allocation de mémoire");
                        free(heredoc_delimiter);
                        return EXIT_FAILURE;
                }
                heredoc_content[0] = '\0';
                while ((input_line = readline("")) != NULL)
                {
                        if (strcmp(input_line, heredoc_delimiter) == 0)
                        {
                                free(input_line);
                                break;
                        }
                        size_t line_len = strlen(input_line);
                        if (buffer_size - strlen(heredoc_content) < line_len)
                        {
                                buffer_size *= 2;
                                heredoc_content = (char *)realloc(heredoc_content, buffer_size);
                                if (heredoc_content == NULL)
                                {
                                        perror("Erreur d'allocation de mémoire");
                                        free(heredoc_delimiter);
                                        free(input_line);
                                        return EXIT_FAILURE;
                                }
                        }
                        strcat(heredoc_content, input_line);
                        strcat(heredoc_content, "\n");
                        free(input_line);
                }
                size_t content_len = strlen(heredoc_content);
                if (content_len > 0 && heredoc_content[content_len - 1] == '\n') {
                        heredoc_content[content_len - 1] = '\0';
                }
                free(heredoc_delimiter);
                free(heredoc_content);
        }
        return (EXIT_SUCCESS);
}

int     redir_out_file(char *arg[])
{
        int     i;
        int     fd;
        char    **tab;
        char    *file_name;
        pid_t   pid;

        i = 0;
        while (arg[i])
        {
                if (strcmp(arg[i], "<") == 0)
                {
                        file_name = arg[i + 1];
                        pid = fork();
                        if (pid == 0)
                        {
                                fd = open(file_name, O_RDONLY);
                                tab = init_tab_sglout(arg);
                                if (fd == -1)
                                        return (perror("open"), EXIT_FAILURE);
                                dup2(fd, STDIN_FILENO);
                                close (fd);
                                if (is_builtin(tab) == 0)
                                        exit (0);
                                else
                                {
                                        if (get_path(tab) == 1)
                                                return (EXIT_FAILURE);
                                }
                        }
                        else if (pid > 0)
                                wait(NULL);
                        else
                                return (perror("fork"), EXIT_FAILURE);
                }
                else if (strcmp(arg[i], "<<") == 0)
                        here_doc(arg);
                i++;
        }
        return (EXIT_SUCCESS);
}

int     redir_in_file(char *arg[])
{
        int     i;
        int     fd;
        char    **tab;
        char    *file_name;
        pid_t   pid;

        i = 0;
        while (arg[i])
        {
                if (strcmp(arg[i], ">") == 0 || strcmp(arg[i], ">>") == 0)
                {
                        file_name = arg[i + 1];
                        pid = fork();
                        if (pid == 0)
                        {
                                if (strcmp(arg[i], ">") == 0)
                                {
                                        fd = open(file_name, O_WRONLY | O_CREAT | O_TRUNC, 0666);
                                        tab = init_tab_sglin(arg);
                                }
                                else
                                {
                                        fd = open(file_name, O_WRONLY | O_CREAT | O_APPEND, 0666);
                                        tab = init_tab_dblin(arg);
                                }
                                if (fd == -1)
                                        return (perror("open"), EXIT_FAILURE);
                                dup2(fd, STDOUT_FILENO);
                                close (fd);
                                if (is_builtin(tab) == 0)
                                        exit (0);
                                else
                                        get_path(arg);
                                perror("execve");
                                exit (EXIT_FAILURE);
                        }
                        else if (pid > 0)
                                wait(NULL);
                        else
                                return (perror("fork"), EXIT_FAILURE);
                }
                if (strcmp(arg[i], ">>") == 0)
                        i++;
                i++;
        }
        return (EXIT_FAILURE);
}

int     ft_evaluator(char *buff)
{
        char    **tab = malloc(sizeof(char *) * 8);
        int     i = 0;
        int     len = 0;
        int     k = 0;
        int     redir_in = 0;
        int     redir_double_in = 0;
        int     redir_out = 0;
        int     here_doc = 0;

        tab[k] = malloc(10);
        while (buff[i])
        {
                if (buff[i] == ' ')
                {
                        k++;
                        tab[k] = malloc(len + 1);
                        len = 0;
                        i++;
                }
                tab[k][len] = buff[i];
                len++;
                i++;
        }
        i = 0;
        while (tab[i])
        {
                if (strcmp (tab[i], ">") == 0)
                        redir_in++;
                if (strcmp (tab[i], ">>") == 0)
                        redir_double_in++;
                if (strcmp(tab[i], "<") == 0)
                        redir_out++;
                if (strcmp(tab[i], "<<") == 0)
                        here_doc++;
                i++;
        }
        if (redir_in != 0 || redir_double_in != 0)
                redir_in_file(tab);
        else if (redir_out != 0 || here_doc != 0)
                redir_out_file(tab);
        else if (is_builtin(tab) == 0)
                return (0);
        else
                get_path(tab);
        return (EXIT_SUCCESS);
}
int main(int argc, char *argv[])
{
        char            *buff;

        while (1)
        {
                buff = readline("minishell ");
                if (buff == NULL)
                        exit (0);
                if (strlen(buff) > 0)
                        add_history(buff);
                ft_evaluator(buff);
        }
        return (0);
}
